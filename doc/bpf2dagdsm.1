.TH "BPF2DAGDSM" 1 "April 2007"
.SH NAME
bpf2dagdsm \- convert the set of BPF expressions to Endace DSM filter XML specification
.SH "SYNOPSIS"
.ad l
.hy 0
.HP 10
\fBbpf2dagdsm\fR --num-ports=<num-ports> [\fI--max-filters=<number>\fR] [\fI--always-match\fR] <bpf_expressions_file >config.xml
.ad
.hy

.SH "DESCRIPTION"

Note: To fully understand this manual page please read the DAG card documents
first, particularly the one referring to \fBData Stream Management\fR (DSM).

This program converts the Berkeley Packet Filter (\fBBPF\fR) expressions
(well-known as the expressions of \fItcpdump\fR(8)) to \fBXML\fR filter
configuration for Endace \fBDAG\fR cards with the \fBDSM\fR classification.
The resulting XML file can be used as the input for Endace's \fIdsm_loader\fR
executable to set up the hardware filter.

The input is expected on stdin with one complete BPF expression per line
(empty lines are ignored, but counted). Each expression is parsed, compiled
into internal node tree, transformed to Disjunctive Normal Form (DNF, that
is OR-of-ANDs) and broken down to atomic filters.

For each atomic filter one DAG hardware filter is occupied. The resulting
single XML configuration file is printed on stdout and describes all
parsed BPF expressions.

Each group of <filter> elements is followed by the XML <!--comment--> block
containing lines like this one (started with special text tag):

    $DAG-DSM-TAG$ bpf-index:3      filters-used:00110000

The `\fBbpf-index\fR' value is the number of the physical input line
contained the BPF expression. The `\fBfilters-used\fR' is the bit array
describing the association between the BPF expression and hardware filters.
The filters are indexed from zero on the left side. The line above says that
the hardware filters #2 and #3 was allocated for BPF expression on input
line 3. On the next comment line the originating BPF expression is copied
(not shown here).

The line tagged with $DAG-DSM-TAG$ helps the caller to quickly re-analyze
the XML output, construct the filter bitmasks and match triggered filters
back with BPF expressions. To ease the parsing, both values on tagged line
are preceded by the colon (:) and followed by the tab character.

The definition at the bottom of the XML configuration instructs the filter
to pass all packets matching at least one hardware filter to DAG stream 0
(first input stream). Other packets are dropped, but see the option
\fB--always-match\fR below for exception.

.SH "OPTIONS"

.TP
\fB--num-ports=<num-ports>\fR
The number of DAG card ports (interfaces), must be greater than zero.
The XML interface element is generated for each interface. See
\fB--always-match\fR below for how the number is used.

.TP
\fB--max-filters=<number>\fR
When the caller knows the number of hardware filters supported by the DAG card
before calling the \fIbpf2dagdsm\fR, that number can be passed using this option.

When the analyzed configuration exceeds this number, no XML output is printed.
Instead the error message is sent do stderr and return code is nonzero.

This is the safety measure, because the \fIdsm_loader\fR blindly loads
everything until all hardware filters are filled and omits the rest.
Then this damaged DAG card configuration is activated. This option allows for
detection of such error and skipping the bogus call of \fIdsm_loader\fR.

.TP
\fB--always-match\fR
This options merely adds one OR'ed partial element for each existing interface.

As result, all packets (even those not matching the previous filters) are
also accepted (not filtered out by the DAG card). The triggered filters can
still be distinguished by analyzing the ERF header. Using this option, the
DAG card stops filtering and becomes the packet classification machine.

.SH "RESTRICTIONS"

Unfortunately, only a subset of BPF expression features is implemented. This
is mainly due to the fact that the original BPF is fed to a machine,
processing the true algorithm for each examined packet. On the other hand,
DSM-driven hardware can only match static bitmasked filters. So all BPF
constructs that require "runtime" computation must have been omited.

Also currently the program is capable of generating only DAG filters using
symbolic XML elements (called "virtual" by Endace), not "raw" filters
containing direct maskable true/false values for every bit in the first 64
bytes of the packets captured. Therefore in the present time only the source
or destination IPv4 addresses of Ethernet frames can be matched. Additionally,
filters can specify TCP or UDP source or destination ports.

.SH "RETURN VALUE"

.TP
0
Entire XML filter successfully constructed and printed out.

.TP
!= 0
Error occured or help text printed. The problem is described on stderr.

.SH TODO

The program should be able to re-use duplicated filters, probably by comparing
their string representation generated by function print_node().

